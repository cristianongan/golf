package server

import (
	"start/config"
	"start/controllers"
	"start/middlewares"
	"strings"

	"github.com/gin-gonic/gin"
	// _ "start/docs" // docs is generated by Swag CLI, you have to import it.
	// ginSwagger "github.com/swaggo/gin-swagger"
	// "github.com/swaggo/gin-swagger/swaggerFiles"
)

var versionCheck = "v1.1"

func healthcheck(c *gin.Context) {
	c.JSON(200, gin.H{"message": "success: " + versionCheck})
	c.Abort()
	return
}

func NewRouter() *gin.Engine {
	router := gin.New()

	// router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	moduleName := strings.Replace(config.GetModuleName(), "_", "-", -1)
	router.Group(moduleName).GET("/", healthcheck)

	if config.GetKibanaLog() {
		router.Use(middlewares.GinBodyLogMiddleware)
	}
	//router.Use(cors.AllowAll())

	/*
	 - Cấu trúc sub-group để custorm Middleware
	*/
	customer := router.Group(moduleName)
	{
		cHealCheck := new(controllers.HealCheck)
		//customer.GET("/", cHealCheck.HealCheck)
		customer.GET("/check-ip", cHealCheck.CheckIp)
		//customer.Any("/metrics", prometheusHandler(promhttp.Handler()))

		// ----------------------------------------------------------
		/// =================== Helper =====================
		// helperApi := customer.Group("helper")
		// {
		// 	cHelper := new(controllers.CHelper)
		// 	//helperApi.POST("/ott/send", cHelper.NotiOttSend)
		// 	helperApi.POST("/ott/log", cHelper.NotiOttLog)
		// }

		// ----------------------------------------------------------
		// ====================== CMS - Operation =======================
		// ----------------------------------------------------------
		// cmsApi := customer.Group("cms")
		// {
		// 	/// =============== Helper ===============
		// 	cHelper := new(controllers.CHelper)
		// 	cmsApi.POST("/helper/order/force-finish", cHelper.OrderForceFinish)

		// }

		// ----------------------------------------------------------
		// ====================== Application =======================
		// ----------------------------------------------------------

		// cronApi := customer.Group("cron-job").Use(middlewares.CronJobMiddleWare())
		// {
		// 	cCron := new(controllers.CCron)
		// 	cronApi.POST("/check-cron", cCron.CheckCron)
		// 	cronApi.POST("/backup-order", cCron.BackupOrder)
		// }
	}

	return router
}
